{"ast":null,"code":"import { useHistory } from 'react-router-dom';\nconst [locationKeys, setLocationKeys] = useState([]);\nconst history = useHistory();\nuseEffect(() => {\n  return history.listen(location => {\n    if (history.action === 'PUSH') {\n      setLocationKeys([location.key]);\n    }\n\n    if (history.action === 'POP') {\n      if (locationKeys[1] === location.key) {\n        setLocationKeys(([_, ...keys]) => keys); // Handle forward event\n      } else {\n        setLocationKeys(keys => [location.key, ...keys]); // Handle back event\n      }\n    }\n  });\n}, [locationKeys]);\nexport default IntersectionObserver;","map":{"version":3,"sources":["/var/www/site_next/pages/Intent.js"],"names":["useHistory","locationKeys","setLocationKeys","useState","history","useEffect","listen","location","action","key","_","keys","IntersectionObserver"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AAGA,MAAM,CAAEC,YAAF,EAAgBC,eAAhB,IAAoCC,QAAQ,CAAC,EAAD,CAAlD;AACA,MAAMC,OAAO,GAAGJ,UAAU,EAA1B;AAEAK,SAAS,CAAC,MAAM;AACd,SAAOD,OAAO,CAACE,MAAR,CAAeC,QAAQ,IAAI;AAChC,QAAIH,OAAO,CAACI,MAAR,KAAmB,MAAvB,EAA+B;AAC7BN,MAAAA,eAAe,CAAC,CAAEK,QAAQ,CAACE,GAAX,CAAD,CAAf;AACD;;AAED,QAAIL,OAAO,CAACI,MAAR,KAAmB,KAAvB,EAA8B;AAC5B,UAAIP,YAAY,CAAC,CAAD,CAAZ,KAAoBM,QAAQ,CAACE,GAAjC,EAAsC;AACpCP,QAAAA,eAAe,CAAC,CAAC,CAAEQ,CAAF,EAAK,GAAGC,IAAR,CAAD,KAAoBA,IAArB,CAAf,CADoC,CAGpC;AAED,OALD,MAKO;AACLT,QAAAA,eAAe,CAAES,IAAD,IAAU,CAAEJ,QAAQ,CAACE,GAAX,EAAgB,GAAGE,IAAnB,CAAX,CAAf,CADK,CAGL;AAED;AACF;AACF,GAlBM,CAAP;AAmBD,CApBQ,EAoBN,CAAEV,YAAF,CApBM,CAAT;AAsBA,eAAeW,oBAAf","sourcesContent":["import { useHistory } from 'react-router-dom'\n\n\nconst [ locationKeys, setLocationKeys ] = useState([])\nconst history = useHistory()\n\nuseEffect(() => {\n  return history.listen(location => {\n    if (history.action === 'PUSH') {\n      setLocationKeys([ location.key ])\n    }\n\n    if (history.action === 'POP') {\n      if (locationKeys[1] === location.key) {\n        setLocationKeys(([ _, ...keys ]) => keys)\n\n        // Handle forward event\n\n      } else {\n        setLocationKeys((keys) => [ location.key, ...keys ])\n\n        // Handle back event\n\n      }\n    }\n  })\n}, [ locationKeys, ])\n\nexport default IntersectionObserver;"]},"metadata":{},"sourceType":"module"}